# Login to Azure account
Connect-AzAccount

# Define the subscription IDs
$subscriptionIds = @("subscriptionId1", "subscriptionId2")

# Define the VM name prefixes to check
$vmNamePrefixes = @("nstm", "nldn")

# Loop through each subscription
foreach ($subscriptionId in $subscriptionIds) {
    # Set the current subscription
    Set-AzContext -SubscriptionId $subscriptionId

    Write-Output "Checking VMs in Subscription: $subscriptionId"

    # Get a list of all VMs and their statuses
    $vms = Get-AzVM -Status

    # Iterate through each VM
    foreach ($vm in $vms) {
        $vmName = $vm.Name
        $resourceGroupName = $vm.ResourceGroupName
        $vmStatus = $vm.PowerState -replace "PowerState/", ""

        # Check if the VM name starts with the specified prefixes
        if ($vmName -like "$($vmNamePrefixes[0])*" -or $vmName -like "$($vmNamePrefixes[1])*") {
            Write-Output "VM Name: $vmName, Status: $vmStatus"

            # Check if the VM is not running
            if ($vmStatus -ne "running") {
                Write-Output "Starting VM: $vmName..."
                Start-AzVM -ResourceGroupName $resourceGroupName -Name $vmName
                Write-Output "VM $vmName started."
            } else {
                Write-Output "VM $vmName is already running."
            }
        }
    }
}


# Authenticate and save the context
$context = Connect-AzAccount

# Get the access token for the context
$token = $context.TokenCache.ReadItems() | Where-Object { $_.TenantId -eq $context.Tenant.Id } | Select-Object -First 1

# Save the token details to a file (e.g., JSON format)
$tokenData = @{
    AccessToken = $token.AccessToken
    ExpiresOn = $token.ExpiresOn
    TenantId = $token.TenantId
    UserId = $token.UserId
}

$tokenData | ConvertTo-Json | Set-Content -Path "azureToken.json"
