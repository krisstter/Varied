using System;
using System.IO;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

public async Task SaveSnapshot(string region, string snapshotFilePath)
{
    string requestUrl = $"{EndPointUrl}/{LinguaVersion}/snapshot/{region}?entityType=BOOK";
    Trace.TraceInformation("Request: {0}", requestUrl);

    using (HttpClient client = new HttpClient())
    {
        // Set WebSSO authentication headers
        string ssoToken = "your-sso-token";
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", ssoToken);

        using (HttpResponseMessage response = await client.GetAsync(requestUrl))
        {
            using (Stream stream = await response.Content.ReadAsStreamAsync())
            {
                using (FileStream fileStream = new FileStream(snapshotFilePath, FileMode.Create))
                {
                    byte[] buffer = new byte[8 * 4096];
                    int bytesRead;
                    while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
                    {
                        await fileStream.WriteAsync(buffer, 0, bytesRead);
                    }
                }
            }
        }
    }

    Trace.TraceInformation("Snapshot saved to {0}", snapshotFilePath);
}

In this updated code, we set the WebSSO authentication token by creating an AuthenticationHeaderValue with the token value and assigning it to the Authorization header of the request.

Make sure to replace "your-sso-token" with your actual WebSSO token value.

Please note that the implementation of WebSSO authentication may vary depending on the specific authentication provider and protocol you are using. This example assumes that you already have the WebSSO token available and can pass it as a Bearer token in the Authorization header.

If you are using a different authentication provider or protocol for WebSSO, you may need to adjust the code accordingly.
