using System;
using System.Configuration;
using System.Diagnostics;
using System.ServiceProcess;
using System.Timers;
using log4net;
using log4net.Config;

namespace RestartToolService
{
    public partial class RestartToolService : ServiceBase
    {
        private static readonly ILog Log = LogManager.GetLogger(typeof(RestartToolService));
        private Timer _timer;
        private string _restartToolPath;
        private string _restartToolConfigPath;
        private TimeSpan _scheduleTime;
        private string _scheduleType;
        private bool _alreadyTriggeredToday;
        private const int OnDemandCommand = 128; // Custom command value for on-demand execution

        public RestartToolService()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            XmlConfigurator.Configure();
            Log.Info("Service started.");

            try
            {
                LoadConfig();

                _timer = new Timer
                {
                    Interval = 60000, // Check every minute
                    AutoReset = true
                };
                _timer.Elapsed += OnElapsedTime;
                _timer.Start();

                DateTime currentTime = DateTime.Now;
                Log.Info($"Current time: {currentTime}");

                DateTime nextScheduledRun = GetNextScheduledRunTime(currentTime);
                Log.Info($"Next scheduled run time: {nextScheduledRun}");

                Log.Info($"Service scheduled to run based on ScheduleType: {_scheduleType}, at {_scheduleTime}.");
            }
            catch (Exception ex)
            {
                Log.Error("Error during service start.", ex);
                throw;
            }
        }

        protected override void OnStop()
        {
            Log.Info("Service stopped.");
            _timer?.Stop();
        }

        protected override void OnCustomCommand(int command)
        {
            if (command == OnDemandCommand)
            {
                Log.Info("On-demand execution triggered.");
                RestartTool();
            }
            base.OnCustomCommand(command);
        }

        private void LoadConfig()
        {
            try
            {
                _restartToolPath = ConfigurationManager.AppSettings["RestartToolPath"];
                _restartToolConfigPath = ConfigurationManager.AppSettings["RestartToolConfigPath"];
                _scheduleTime = TimeSpan.Parse(ConfigurationManager.AppSettings["ScheduleTime"]);
                _scheduleType = ConfigurationManager.AppSettings["ScheduleType"];

                Log.Info("Configuration loaded successfully.");
            }
            catch (Exception ex)
            {
                Log.Error("Error loading configuration.", ex);
                throw;
            }
        }

        private void OnElapsedTime(object source, ElapsedEventArgs e)
        {
            var currentTime = DateTime.Now.TimeOfDay;
            var currentDayOfWeek = DateTime.Now.DayOfWeek;

            if (ShouldRunToday(currentDayOfWeek))
            {
                if (!_alreadyTriggeredToday && currentTime >= _scheduleTime && currentTime < _scheduleTime.Add(TimeSpan.FromMinutes(1)))
                {
                    _alreadyTriggeredToday = true;
                    RestartTool();
                }
            }

            if (currentTime.TotalSeconds < 60)
            {
                _alreadyTriggeredToday = false;
            }
        }

        private bool ShouldRunToday(DayOfWeek currentDayOfWeek)
        {
            return _scheduleType switch
            {
                "MondayOnly" => currentDayOfWeek == DayOfWeek.Monday,
                "Weekdays" => currentDayOfWeek >= DayOfWeek.Monday && currentDayOfWeek <= DayOfWeek.Friday,
                _ => false
            };
        }

        private DateTime GetNextScheduledRunTime(DateTime currentTime)
        {
            DateTime scheduledTimeToday = currentTime.Date.Add(_scheduleTime);

            if (ShouldRunToday(currentTime.DayOfWeek) && currentTime.TimeOfDay < _scheduleTime)
            {
                return scheduledTimeToday;
            }

            // If the scheduled time has already passed today, calculate the next available scheduled time
            DayOfWeek nextDay = GetNextScheduledDay(currentTime.DayOfWeek);
            DateTime nextScheduledRun = currentTime.Date.AddDays((int)nextDay - (int)currentTime.DayOfWeek).Add(_scheduleTime);

            return nextScheduledRun;
        }

        private DayOfWeek GetNextScheduledDay(DayOfWeek currentDayOfWeek)
        {
            // Determine the next day based on the schedule type
            if (_scheduleType == "MondayOnly")
            {
                return DayOfWeek.Monday > currentDayOfWeek ? DayOfWeek.Monday : DayOfWeek.Monday + 7;
            }
            else if (_scheduleType == "Weekdays")
            {
                if (currentDayOfWeek >= DayOfWeek.Monday && currentDayOfWeek < DayOfWeek.Friday)
                {
                    return currentDayOfWeek + 1;
                }
                else if (currentDayOfWeek == DayOfWeek.Friday)
                {
                    return DayOfWeek.Monday;
                }
                else
                {
                    return DayOfWeek.Monday;
                }
            }

            throw new InvalidOperationException("Invalid ScheduleType configuration.");
        }

        private void RestartTool()
        {
            try
            {
                Log.Info($"Restarting tool: {_restartToolPath} with config: {_restartToolConfigPath}");
                var processStartInfo = new ProcessStartInfo
                {
                    FileName = _restartToolPath,
                    Arguments = $"\"{_restartToolConfigPath}\"", // Passing the path to restarttool.json as an argument
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using (var process = Process.Start(processStartInfo))
                {
                    process.WaitForExit();
                }
                Log.Info("RestartTool executed successfully.");
            }
            catch (Exception ex)
            {
                Log.Error("Error during RestartTool execution.", ex);
            }
        }
    }
}
