# Start the transcript for logging
$logFile = "C:\path\to\log\pscp_transfer_log.txt"  # Update with your log file path
Start-Transcript -Path $logFile -Append

# Define variables
$pscpPath = "C:\path\to\pscp.exe"  # Update with the correct path to pscp
$plinkPath = "C:\path\to\plink.exe" # Update with the correct path to plink
$sourceFile = "C:\path\to\your\file.txt"           # Update with the file you want to transfer
$jsonParamFile = "C:\path\to\param_file.json"      # Update with your JSON parameter file path

# Read the JSON param file
$userHostList = Get-Content $jsonParamFile | ConvertFrom-Json

Write-Debug "pscpPath: $pscpPath"
Write-Debug "plinkPath: $plinkPath"
Write-Debug "sourceFile: $sourceFile"
Write-Debug "jsonParamFile: $jsonParamFile"

# Loop through each entry in the JSON and perform the file transfer
foreach ($entry in $userHostList) {
    $connectionName = $entry.connectionName
    $user = $entry.user
    $remoteHost = $entry.remoteHost  # Changed variable name to remoteHost
    $keyPath = $entry.keyPath
    $destinationPath = $entry.destinationPath

    Write-Output "[$connectionName] Ensuring host key acceptance for $user@$remoteHost"

    # Pre-check to accept the SSH fingerprint using cmd.exe to simulate "yes" input
    $cmd = "cmd.exe /c echo y | $plinkPath -i $keyPath $user@$remoteHost echo 'Host key checked'"
    Invoke-Expression $cmd

    # Check if the pre-check was successful
    if ($LASTEXITCODE -ne 0) {
        Write-Error "[$connectionName] Failed to accept host key for $user@$remoteHost"
        continue
    }

    Write-Output "[$connectionName] Starting file transfer for $user@$remoteHost to $destinationPath"
    Write-Debug "[$connectionName] Connecting to $remoteHost with user: $user and key: $keyPath"
    
    # Execute pscp command to copy file to UNIX host using the specified private key and destination path
    & $pscpPath -batch -i $keyPath -scp $sourceFile "$user@${remoteHost}:$destinationPath"

    # Check the result of the pscp command
    if ($LASTEXITCODE -eq 0) {
        Write-Output "[$connectionName] File transfer to $user@$remoteHost successful."
    } else {
        Write-Error "[$connectionName] File transfer to $user@$remoteHost failed with error code $LASTEXITCODE."
        Write-Debug "[$connectionName] pscp exit code: $LASTEXITCODE"
    }
}

# End the transcript for logging
Stop-Transcript


  [
  {
    "connectionName": "Connection1",
    "user": "user1",
    "host": "host1",
    "keyPath": "C:\\path\\to\\key1.ppk",
    "destinationPath": "/path/on/host1"
  },
  {
    "connectionName": "Connection2",
    "user": "user2",
    "host": "host2",
    "keyPath": "C:\\path\\to\\key2.ppk",
    "destinationPath": "/path/on/host2"
  },
  {
    "connectionName": "Connection3",
    "user": "user3",
    "host": "host3",
    "keyPath": "C:\\path\\to\\key3.ppk",
    "destinationPath": "/path/on/host3"
  }
]




