# Define the directory where the batch files are located
$batchFileDirectory = "C:\Scripts"

# Define the list of batch files to execute after the initial two
$batchFiles = @(
    Join-Path $batchFileDirectory "batch3.bat",
    Join-Path $batchFileDirectory "batch4.bat",
    Join-Path $batchFileDirectory "batch5.bat"
)

# Define the Execute-BatchFile function
function Execute-BatchFile {
    param (
        [string]$batchFile
    )
    
    # Start the batch file process
    $process = Start-Process -FilePath $batchFile -NoNewWindow -Wait -PassThru
    
    # Return the exit code of the batch file
    return $process.ExitCode
}

# Execute batch1.bat
$batch1Path = Join-Path $batchFileDirectory "batch1.bat"
$batch1ExitCode = Execute-BatchFile -batchFile $batch1Path

if ($batch1ExitCode -ne 0) {
    Write-Output "batch1.bat failed with exit code $batch1ExitCode. Stopping execution."
    exit $batch1ExitCode
}

# Execute batch2.bat
$batch2Path = Join-Path $batchFileDirectory "batch2.bat"
$batch2ExitCode = Execute-BatchFile -batchFile $batch2Path

if ($batch2ExitCode -ne 0) {
    Write-Output "batch2.bat failed with exit code $batch2ExitCode. Stopping execution."
    exit $batch2ExitCode
}

# If both batch1.bat and batch2.bat succeeded, execute remaining batch files
Write-Output "batch1.bat and batch2.bat completed successfully. Proceeding with the rest."

foreach ($batchFile in $batchFiles) {
    $exitCode = Execute-BatchFile -batchFile $batchFile
    if ($exitCode -ne 0) {
        Write-Output "$batchFile failed with exit code $exitCode. Stopping execution."
        break
    } else {
        Write-Output "$batchFile completed successfully."
    }
}
